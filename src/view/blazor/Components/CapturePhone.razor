@using BlazorApplicationInsights.Interfaces
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Text.RegularExpressions
@using System.IdentityModel.Tokens.Jwt
@using LendingView.Servcies
@using BlazorApplicationInsights.Models


@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider ast
@inject IAccessTokenProvider TokenProvider
@inject IUserService _userService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject LendingTrackerService _service;



<AuthorizeView>
    <Authorized Context="authContext">

        @if (_collectPhone)
        {
            <MudPopover Elevation="0"  AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Open="@_collectPhone" RelativeWidth="@DropdownWidth.Adaptive">
                <MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="7">
                            <MudPaper Class="pa-4">
                                <EditForm Model="@me" method="post" OnValidSubmit="HandleValidSubmit">
                                    <DataAnnotationsValidator />
                                    <MudTextField T="string" ReadOnly="true" Value="@me.FullName"></MudTextField>
                                    <MudTextField T="string" ReadOnly="true" Label="Email" Value="@me.Email"></MudTextField>
                                    <MudSelect @bind-Value="me.CountryCode" Label="Country Code" Placeholder="Chose Country Code">
                                        @foreach (var country in countries)
                                        {
                                            <MudSelectItem Value="country.Code">@country.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudTextField T="string" Label="Phone Number" @bind-Value="me.PhoneNumber" For="() => me.PhoneNumber" Placeholder="Enter valid phone"></MudTextField>
                                    <MudField Label="Items">You can track @me.MaxItems items</MudField>
                                    <MudField Label="Borrowers">You can track @me.MaxBorrowers borrowers</MudField>
                                    <MudSpacer />
                                    <MudPaper justify-end>
                                        <MudButtonGroup Size="@Size.Large">
                                            <MudButton ButtonType="ButtonType.Submit" OnClick="@ToggleOpen" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto d-flex justify-end align-center">Update</MudButton>
                                        </MudButtonGroup>
                                    </MudPaper>
                                </EditForm>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudText>

            </MudPopover>

        }
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>



@code {

    public Origin TransformOrigin { get; set; } = Origin.CenterCenter;
    public Origin AnchorOrigin { get; set; } = Origin.CenterCenter;

    //Country selector support
    private static List<Country> countries = CountryData.GetCountries();
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    [Parameter] public EventCallback Close { get; set; }

    private User me = new User();
    private ClaimsIdentity identity;
    private string accessToken = string.Empty;
    private string error;
    private bool _collectPhone = true;
    private ClaimsPrincipal _user;
    private void ToggleOpen() => _collectPhone = !_collectPhone;

    protected override async Task OnInitializedAsync()
    {

        // await GetAccessToken();
        var authState = await ast.GetAuthenticationStateAsync();
        _user = (await AuthenticationState).User;
        me.FullName = _user.Identity.Name;
        me.UserId = Guid.Parse(_user.Claims.Where(c => c.Type == "sub").First().Value);
        string email = string.Empty;
        string emailPattern = @"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}";
        var firstEmail = _user.Claims.First(n => n.Type == "emails").Value;
        me.Email = firstEmail;
        //lookup user profile data
        User tempUser = null;
        try
        {
            tempUser = await _service.GetUsersAsync();
        }
        catch (Exception ex)
        {
            //eat this -  the user is in the 
            //identity store but not the database
            //user will be added
        }

        if(tempUser != null){
            me = tempUser;
        }
        else
        {
            me.MaxBorrowers = 5;
            me.MaxItems = 5;
        }
        Match match = Regex.Match(firstEmail, emailPattern);
        me.Email = match.Value;

        await base.OnInitializedAsync();


    }

    private async void HandleValidSubmit()
    {
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        var response = await Http.PostAsJsonAsync<User>("/users", me);

        if (response.StatusCode == System.Net.HttpStatusCode.Created)
        {
            _collectPhone = false;
            string nextUrl = await LocalStorage.GetItemAsStringAsync("lastUrl");
            await LocalStorage.SetItemAsync<bool>("userSet", true);
            Navigation.NavigateTo("/items");
        }

        await Close.InvokeAsync();

    }



    private async Task<string> GetClaimAsync(string claimType)
    {

        var handler = new JwtSecurityTokenHandler();

        // Read the token
        if (handler.CanReadToken(accessToken))
        {
            var jwtToken = handler.ReadJwtToken(accessToken);

            // Access claims
            var claims = jwtToken.Claims;

            foreach (var claim in claims)
            {
                if (claim.Type == claimType)
                {
                    if (claim.Type == "emails")
                    {
                        string emailPattern = @"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}";

                        var firstEmail = jwtToken.Claims.First(n => n.Type == "emails").Value;
                        Console.WriteLine(firstEmail);

                        Match match = Regex.Match(firstEmail, emailPattern);

                        if (match.Success)
                        {
                            return match.Value;
                        }
                        else
                        {
                            return "No Email";
                        }
                    }
                    return claim.Value;
                }
            }
        }
        return null;
    }

    private async Task<string> ParseEmails(string emailClaimValues)
    {
        string emailPattern = @"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}";

        Match match = Regex.Match(emailClaimValues, emailPattern);

        if (match.Success)
        {
            return match.Value;
        }
        else
        {
            return "No Email";
        }
    }

    private async Task<User> GetUserPhone(string userId)
    {
        User user = await Http.GetFromJsonAsync<User>($"/users/{userId}");
        return user;
    }

   
}

