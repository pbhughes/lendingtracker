@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@using MudBlazor
@using LendingView.Components
@using System.Net
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager Navigation


<MudGrid>
    <MudItem xs="4">
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
            <MudButton>Standard Messages</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                <MudMenuItem OnClick="async () => AskForITemBack()">Please Return my @ItemName</MudMenuItem>
                <MudMenuItem OnClick="async () => Inquire()">Still using my @ItemName?</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
    </MudItem>
    <MudHidden Breakpoint="@Breakpoint.MdAndUp">
        <MudItem xs="12">
            <div class="d-flex flex-grow-1 gap-4">
                <MudTextField T="string" Label="Type a few words" MaxLength="200"></MudTextField>
                <MudButton Color="@Color.Primary" Variant="@Variant.Filled">Send</MudButton>
            </div>
        </MudItem>
    </MudHidden>
    <MudItem xs="8">
            <MudHidden Breakpoint="@Breakpoint.MdAndDown">
            <div class="d-flex flex-grow-1 gap-4">
                <MudTextField T="string" Label="Type a few words" MaxLength="200"></MudTextField>
                <MudButton Color="@Color.Primary" Variant="@Variant.Filled">Send</MudButton>
            </div>
            </MudHidden>
    </MudItem>
</MudGrid>



<MudDataGrid T="Message" Items="@Elements">
    <Columns>
        <PropertyColumn Property="x => x.Text" Title="Message"/>
        <PropertyColumn Property="x => x.Direction" Title="Direction">
            <CellTemplate>
                @if (context.Item.Direction == 0)
                {
                    <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Title="Favorite" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.ArrowLeft" Title="Favorite" />
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.MessageDate" Title="Date">
            <CellTemplate>
                @DateTime.Parse(context.Item.MessageDate).ToLocalTime().ToString("yyyy - MM - dd HH: mm:ss")
            </CellTemplate>
        </PropertyColumn>
    </Columns>

</MudDataGrid>


@code {
    [Parameter]
    public Guid transactionId { get; set; }
    [Parameter]
    public string ItemName { get; set; }

    private IEnumerable<Message> Elements = new List<Message>();
    string _accessToken;
    string _error;

    //signalr support wire up connection if authenticated
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {

        await GetData();

        //wire up signalr if authenticated
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        bool isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        if (isAuthenticated)
        {



            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{Http.BaseAddress}messagehub")
                .WithAutomaticReconnect()
                .ConfigureLogging(logging =>
                {
                    logging.SetMinimumLevel(LogLevel.Debug);

                })
                .Build();


            hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                var encodedMsg = $"{user}: {message}";
                messages.Add(encodedMsg);
                InvokeAsync(StateHasChanged);

            });

            await hubConnection.StartAsync();
            Console.WriteLine("Connection to message hub started");
        }
    }

    private async void AskForITemBack(){
        //send the item back message
        string message = $"Can you please return my {ItemName}.";
    }

    private async void Inquire(){
        ////inquire about an item
        string message = $"Ar you still using my {ItemName}?";
    }

    private async Task GetData()
    {

         Elements = await Http.GetFromJsonAsync<List<Message>>($"/messages/{transactionId}");
    }
    

   
}
