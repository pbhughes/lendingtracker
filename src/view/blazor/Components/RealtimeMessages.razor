@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@using MudBlazor
@using LendingView.Components
@using System.Net
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client
@using LendingView.Servcies
@using FluentValidation

@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager Navigation
@inject LendingTrackerService _dataService



<MudGrid>
    <MudItem xs="4">
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
            <MudButton>Standard Messages</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                <MudMenuItem OnClick="async () => AskForItemBack()">Please Return my @ItemName</MudMenuItem>
                <MudMenuItem OnClick="async () => Inquire()">Still using my @ItemName?</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
    </MudItem>
    <MudHidden Breakpoint="@Breakpoint.MdAndUp">
        <MudItem xs="12">
            <div class="d-flex flex-grow-1 gap-4">
                <MudForm>
                    <MudTextField T="string" Label="Type a few words" MaxLength="200" @bind-Value="message" @bind-Text="message" Validation="@messageValidator"></MudTextField>
                    <MudButton Color="@Color.Primary" Variant="@Variant.Filled">Send</MudButton>
                </MudForm>
            </div>
        </MudItem>
    </MudHidden>
    <MudItem xs="8">
        <MudHidden Breakpoint="@Breakpoint.MdAndDown">
            <div>
                <MudTextField T="string" Label="Type a few words" MaxLength="200" @bind-Value="message" @bind-Text="message" FullWidth="true" 
                Validation="@messageValidator" Variant="@Variant.Text" AutoGrow="true" Lines="1" MaxLines="3"></MudTextField>
                <MudButton Color="@Color.Primary" Variant="@Variant.Filled" OnClick="async () => SendMessage()" >Send</MudButton>
                @if (showSpinner)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                }
            </div>
        </MudHidden>
    </MudItem>
</MudGrid>



<MudDataGrid T="Message" Items="@Elements">
    <Columns>
        <PropertyColumn Property="x => x.Text" Title="Message"/>       
        <PropertyColumn Property="x => x.MessageDate" Title="Date">
            <CellTemplate>
                @DateTime.Parse(context.Item.MessageDate).ToLocalTime().ToString("yyyy - MM - dd")
            </CellTemplate>
        </PropertyColumn>
    </Columns>

</MudDataGrid>


@code {
    [Parameter]
    public Guid transactionId { get; set; }
    [Parameter]
    public string ItemName { get; set; }

    [Parameter]
    public int ItemId { get; set; }

    private IEnumerable<Message> Elements = new List<Message>();
    string? _accessToken;
    string? _error;
    string? message;
    MudForm form;
    bool showSpinner = false;


    //signalr support wire up connection if authenticated
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {

        await GetData();

        //wire up signalr if authenticated
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        bool isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        if (isAuthenticated)
        {



            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{Http.BaseAddress}messagehub")
                .WithAutomaticReconnect()
                .ConfigureLogging(logging =>
                {
                    logging.SetMinimumLevel(LogLevel.Debug);

                })
                .Build();


            hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                var encodedMsg = $"{user}: {message}";
                messages.Add(encodedMsg);
                InvokeAsync(StateHasChanged);

            });

            await hubConnection.StartAsync();
            Console.WriteLine("Connection to message hub started");
        }
    }


    MessageValidator<string> messageValidator = new MessageValidator<string>( x => x.NotEmpty().Length(3,200));



    private async void AskForItemBack(){
        //send the item back message
        message = $"Can you please return my {ItemName}.";


    }

    private async void Inquire(){
        ////inquire about an item
        message = $"Are you still using my {ItemName}?";
    }

    private async void SendMessage(){
        showSpinner = true;
        try
        {
            bool success = await _dataService.SendSimpleMessageAsync(transactionId, new SimpleMessage() { ItemId = ItemId, Message = message });
            if (success)
            {
                message = string.Empty;
            }
        }
        catch (Exception ex)
        {

            throw;
        }
        finally{

            showSpinner = false;
            StateHasChanged();
        }
      
    }

    private async Task GetData()
    {

         Elements = await Http.GetFromJsonAsync<List<Message>>($"/messages/{transactionId}");
    }
    

   
}
