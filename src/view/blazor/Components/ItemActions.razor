
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@using MudBlazor
@using LendingView.Components
@using System.Net
@using Microsoft.Extensions.Logging

@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<MudButtonGroup Color="Color.Primary" Variant="Variant.Text">
    <MudButton Icon="@Icons.Material.Filled.Inbox"  Color="@Color.Success" Variant="Variant.Filled" Disabled="!_showCheckInButton" OnClick="@( () => CheckIn.InvokeAsync(item))">Check In</MudButton>
    <MudButton Icon="@Icons.Material.Filled.Outbox" Color="@Color.Success" Variant="Variant.Filled" Disabled="_showCheckInButton" OnClick="@( () => CheckOutLocal(true))">Check Out</MudButton>
    <MudPopover Open="@_open" Fixed="true">
        <CheckItemOut ItemId="@item.ItemId" Close="CheckOutHandler"></CheckItemOut>
    </MudPopover>
</MudButtonGroup>


@code {
    [Parameter]
    public Item item { get; set; } = new Item();

    [Parameter] public EventCallback<Item> CheckIn { get; set; }
    [Parameter] public EventCallback<Item> CheckOut { get; set; }


    [Parameter] public bool _showCheckInButton { get; set; }
    [Parameter] public bool _showCheckoutButton { get; set; }

    private bool _open = false;
    private string _accessToken;
    private string _error;



    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    async void CheckOutLocal(bool showCheckOut){


        _open = showCheckOut;
        
    }

    async void CheckOutHandler()
    {
        _open = false;
        await CheckOut.InvokeAsync();

        
    }

    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            _accessToken = token.Value;
        }
        else
        {
            _error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.InteractiveRequestUrl!);
            }
        }
    }

}
