@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@using MudBlazor
@using LendingView.Components
@using System.Net
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager Navigation


<MudCard Outlined="true" Class="border-solid border-2 mud-border-primary p-4">
    <MudCardHeader>
        <p>Items</p>
    </MudCardHeader>
    <MudCardContent>
        <MudDataGrid T="BorrowerItem"  @ref="Elements" SelectedItem="_currentItem" ServerData="ServerReload" RowClick="OnRowClicked">
            <Columns>
                <PropertyColumn Property="x => x.ItemName" Title="Item Name" />
                <PropertyColumn Property="x => x.BorrowedAt" Title="Borrowed At" />
                <PropertyColumn Property="x => x.ReturnDate.ToShortDateString()" Title="Return Date" />
                <TemplateColumn Context="Item">
                    <CellTemplate>
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Text">
                            <MudLink Icon="@Icons.Material.Filled.Inbox" Color="@Color.Success" Variant="Variant.Filled" OnClick="() => CheckInHandler(_currentItem)">Check In</MudLink>
                        </MudButtonGroup>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudCardContent>
</MudCard>

@code {

    [Parameter] public Borrower Borrower { get; set; }
    private MudDataGrid<BorrowerItem> Elements = new MudDataGrid<BorrowerItem>();
    private string? accessToken;
    private string? error;
    List<AlignItems> _items;
    private BorrowerItem _currentItem;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async Task<GridData<BorrowerItem>> ServerReload(GridState<BorrowerItem> state)
    {
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        var data = await Http.GetFromJsonAsync<List<BorrowerItem>>($"/borrowers/transactions/{Borrower.BorrowerId}");

        return new GridData<BorrowerItem>
            {
                Items = data
            };
    }



    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        else
        {
            error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.InteractiveRequestUrl!);
            }
        }
    }

    async void CheckInHandler( BorrowerItem borrowerItem )
    {

        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        await Http.DeleteAsync($"/transactions/{_currentItem.TransactionId}");

        await Elements.ReloadServerData();
    }

    private void OnRowClicked(DataGridRowClickEventArgs<BorrowerItem> args)
    {
        _currentItem = args.Item;
    }

  
}
