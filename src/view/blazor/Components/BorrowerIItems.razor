@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@using MudBlazor
@using LendingView.Components
@using System.Net
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager Navigation

<MudCard>
    <MudCardHeader>
        @if (Elements.Count() == 0)
        {
            <p>No Items</p>
        }
        else
        {
            <MudDataGrid Items="@Elements">
                <Columns>
                <PropertyColumn Property="x => x.ItemName" Title="Item Name" />
                <PropertyColumn Property="x => x.BorrowedAt" Title="Borrowed At" />
                <PropertyColumn Property="x => x.ReturnDate.ToShortDateString()" Title="Return Date" />
            </Columns>
        </MudDataGrid>
        }
    </MudCardHeader>
</MudCard>
@code {

    [Parameter] public Borrower Borrower { get; set; }
    private IEnumerable<BorrowerItems> Elements = new List<BorrowerItems>();
    private string? accessToken;
    private string? error;
    List<AlignItems> _items;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override async Task  OnParametersSetAsync()
    {
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        Elements = await Http.GetFromJsonAsync<List<BorrowerItems>>($"/borrowers/transactions/{Borrower.BorrowerId}");
      
    }

    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        else
        {
            error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.InteractiveRequestUrl!);
            }
        }
    }

}
