@page "/registernewuser"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Json
@using LendingView.Models
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Authorization
@using System.IdentityModel.Tokens.Jwt
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation



@code {

    private string accessToken;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;
        User user = new User();
        {
            user.UserId = Guid.Parse(await GetClaimAsync("sub"));
            user.Email = await GetClaimAsync("emails");
            user.FullName = await GetClaimAsync("name");
        }
        string address = await GetClaimAsync("streetAddress");
        string city = await GetClaimAsync("city");
        string state = await GetClaimAsync("state");
        string zip = await GetClaimAsync("postalCode"); 
        user.Address = $"{address}\n{city}, {state} {zip}";


        user.CreatedAt = DateTime.Now;

        var response = await Http.PostAsJsonAsync<User>("/users", user);
       

    }

    private async Task<string> GetClaimAsync(string claimType){

        var handler = new JwtSecurityTokenHandler();

        // Read the token
        if (handler.CanReadToken(accessToken))
        {
            var jwtToken = handler.ReadJwtToken(accessToken);

            // Access claims
            var claims = jwtToken.Claims;

            foreach (var claim in claims)
            {
                if (claim.Type == claimType)
                {
                    if(claim.Type == "emails")
                    {
                        string emailPattern = @"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}";

                        var firstEmail = jwtToken.Claims.First(n => n.Type == "emails").Value;
                        Console.WriteLine(firstEmail);

                        Match match = Regex.Match(firstEmail, emailPattern);

                        if (match.Success)
                        {
                            return  match.Value;
                        }
                        else
                        {
                            return "No Email";
                        }
                    }
                    return claim.Value;
                }
            }
        }
        return null;
    }
    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" ,
                                 "profile", "openid"
                }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        else
        {
            error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.RedirectUrl!);
            }
        }
    }
}
