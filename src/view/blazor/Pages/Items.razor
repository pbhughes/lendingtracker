@page "/items"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.QuickGrid
@using LendingView.Models
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation

<h1>Items</h1>


@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="@items" ItemKey="item => item.ItemId">
        <PropertyColumn Property="@(i => i.ItemId)" Sortable="true" />
        <PropertyColumn Property="@(i => i.ItemName)" Sortable="true" />
        <PropertyColumn Property="@(i => i.Description)" Sortable="true"/>
    </QuickGrid>

}

@code {
    private IQueryable<Item> items;

    protected override async Task OnInitializedAsync()
    {
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;
        var itemsList = new List<Item>();
        itemsList = await Http.GetFromJsonAsync<List<Item>>("https://localhost:5002/items");
        items = itemsList.AsQueryable();
    }

   

    private string? accessToken;
    private string? error;

  
    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        else
        {
            error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.InteractiveRequestUrl!);
            }
        }
    }
}
