@page "/items"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@inject HttpClient Http


@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation

<h1>Items</h1>


@if (Elements == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid T="Item" Items="@Elements.Take(4)" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                 Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
        <Columns>
            <HierarchyColumn T="Item" ButtonDisabledFunc="@(x => x.ItemId == 1)" InitiallyExpandedFunc="@(x => x.ItemId == 1)"  />
            <PropertyColumn Property="x => x.ItemId" Title="Item" Editable="false" />
            <PropertyColumn Property="x => x.ItemName" />
            <PropertyColumn Property="x => x.Description" />
            <PropertyColumn Property="x => x.IsAvailable" />
            <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.ItemId</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>This element is number @context.Item.ItemName</MudText>
                    <MudText>This element has a molar mass of @context.Item.Description</MudText>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Item" />
        </PagerContent>
    </MudDataGrid>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch T="bool" @bind-Value="_isReadOnly" Color="@Color.Primary">Read Only</MudSwitch>
        <div class="d-flex justify-start align-center">
            <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
            <MudSwitch @bind-Value="_isCellEditMode" Color="Color.Primary">Cell</MudSwitch>
        </div>
        <div class="d-flex justify-start align-center">
            <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
            <MudSwitch @bind-Value="_editTriggerRowClick" Color="Color.Primary">On Row Click</MudSwitch>
        </div>
    </div>

    <MudExpansionPanels Style="flex:1">
        <MudExpansionPanel Text="Show Events">
            @foreach (var message in _events)
            {
                <MudText Typo="@Typo.body2">@message</MudText>
            }
            @if (_events.Count > 0)
            {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
}

@code {
    private IEnumerable<Item> Elements = new List<Item>();

    private bool _isReadOnly = true;
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;
        Elements = await Http.GetFromJsonAsync<List<Item>>("https://localhost:5002/items");
        //items = items1.AsQueryable();
    }

   

    private string? accessToken;
    private string? error;

  
    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        else
        {
            error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.InteractiveRequestUrl!);
            }
        }
    }



    // events
    void StartedEditingItem(Item item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Item item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Item item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
}
