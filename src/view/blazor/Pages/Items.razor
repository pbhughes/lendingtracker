@page "/items"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@using MudBlazor
@using LendingView.Components
@using System.Net


@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation

@if(_isAddNew)
{
    <LendingView.Components.AddNewItem AddingNew="@_isAddNew" OnAddNew="HandleAddnew"></LendingView.Components.AddNewItem>
}
else{


    <MudDataGrid T="Item" @ref="Elements" ServerData="ServerReload" Filterable="false" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem"  CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Items</MudText>
            <MudIconButton Size="@Size.Large" Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="() => AddNew()" />
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="Item"  />
            <PropertyColumn Property="x => x.ItemId" Title="Item" Editable="false" />
            <PropertyColumn Property="x => x.ItemName" Title="Name" />
            <PropertyColumn Property="x => x.Description" />
            <PropertyColumn Property="x => x.IsAvailable">
                <EditTemplate>
                    <MudSwitch @bind-Value="context.Item.IsAvailable" Label="Is Avialable" />
                </EditTemplate>
            </PropertyColumn>
            <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => DeleteItemAsync(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudGrid>
                <MudItem xs="3">
                    <MudCard Outlined="true" Class="border-solid border-2 mud-border-primary pa-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@context.Item.ItemId</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>@context.Item.ItemName</MudText>
                            <MudText> @context.Item.Description</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="5">
                    @if (context.Item.Transactions.Count() > 0)
                    {
                        <MudCard Outlined="true" Class="border-solid border-2 mud-border-primary pa-4">
                            <MudCardHeader>
                                <h3>Borrower</h3>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudTable Items="@context.Item.Transactions">
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Email</MudTh>
                                        <MudTh>Phone</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="transactions">
                                        <MudTd>@transactions.Borrower.Name</MudTd>
                                        <MudTd>
                                            @if (transactions.Borrower.BorrowerEmail != null)
                                            {
                                                string method = "email";
                                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => SendSmsMessage(context.Item, context.Item.Transactions.ToArray()[0], method)">
                                                    @transactions.Borrower.BorrowerEmail
                                                </MudButton>
                                            }
                                        </MudTd>
                                        <MudTd>
                                            @code {
                                                string method = "sms";
                                                }
                                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => SendSmsMessage(context.Item, context.Item.Transactions.ToArray()[0], method)">
                                                       @transactions.Borrower.BorrowerSms
                                            </MudButton>
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                        </MudCardContent>
                        <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                        </MudCardActions>
                    </MudCard>
                    }
                </MudItem>
                <MudItem xs="12">
                    @if(context.Item.Transactions.Count() > 0){

                    
                        @if (context.Item.Transactions.ToArray()[0].Messages.Count() > 0)
                        {
                             <MudCard Outlined="true" Class="border-solid border-2 mud-border-primary pa-4">
                                <MudCardHeader>
                                    <h3>Messages</h3>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTable Items="@context.Item.Transactions.ToArray()[0].Messages">
                                        <HeaderContent>
                                            <MudTh>Text</MudTh>
                                            <MudTh>Direction</MudTh>
                                            <MudTh>Method</MudTh>
                                            <MudTh>Date</MudTh>
                                        </HeaderContent>
                                        <RowTemplate Context="messages">
                                            <MudTd>@messages.Text</MudTd>
                                            <MudTd>
                                                @if(messages.Direction == 0){
                                                    <MudIcon Icon="@Icons.Material.Filled.ArrowCircleRight" Title="Favorite" />
                                                }
                                                else{
                                                    <MudIcon Icon="@Icons.Material.Filled.ArrowCircleLeft" Title="Favorite" />
                                                }
                                            </MudTd>
                                            <MudTd>@messages.Method</MudTd>
                                            <MudTd>@messages.MessageDate</MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudCardContent>
                             </MudCard>
                        }
                   }
                </MudItem>
            </MudGrid>

        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Item" />
        </PagerContent>
    </MudDataGrid>
}
<div class="d-flex flex-wrap mt-4">
    <MudSwitch T="bool" @bind-Value="_isReadOnly" Color="@Color.Primary">Read Only</MudSwitch>
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
        <MudSwitch @bind-Value="_isCellEditMode" Color="Color.Primary">Cell</MudSwitch>
    </div>
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
        <MudSwitch @bind-Value="_editTriggerRowClick" Color="Color.Primary">On Row Click</MudSwitch>
    </div>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>


@code {
    private MudDataGrid<Item> Elements;

    private bool _isReadOnly = true;
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;
    string searchString = null;
    public bool _isAddNew = false;
    private string? accessToken;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return Elements.ReloadServerData();
    }




    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        else
        {
            error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.InteractiveRequestUrl!);
            }
        }
    }

    private async Task<GridData<Item>> ServerReload(GridState<Item> state)
    {

        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        IEnumerable<Item> data = await Http.GetFromJsonAsync<List<Item>>("/items");
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        var totalItems = data.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(Item.ItemName):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.ItemName
                    );
                    break;
                case nameof(Item.Description):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Description
                    );
                    break;
                case nameof(Item.IsAvailable):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.IsAvailable
                    );
                    break;
            }
        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<Item>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private async void SendSmsMessage(Item item, Transaction transaction, string method)
    {
        string direction = "out";
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

      
    }

    // events
    void StartedEditingItem(Item item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Item item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }


    async void CommittedItemChanges(Item item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

        //call the put AI and commit the changes
        CommitChanges(item);

        var response = await Http.PutAsJsonAsync<Item>($"/items/{item.ItemId}", item);
    }

    async void DeleteItemAsync(Item item)
    {
        _events.Insert(0, $"Event = Item deleted, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

        //call the put AI and commit the changes
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        var response = await Http.DeleteAsync($"/items/{item.ItemId}");

        Elements.ReloadServerData();
    }

    async void CommitChanges(Item item){
        //call the put AI and commit the changes
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        var response = await Http.PutAsJsonAsync<Item>($"/items/{item.ItemId}", item);
        Elements.ReloadServerData();
    }

    async void AddNew(){
        _isAddNew = true;
    }

    private void HandleAddnew(string msg)
    {
        _isAddNew = false;
    }
}
