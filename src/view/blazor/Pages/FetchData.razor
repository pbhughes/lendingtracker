@page "/fetchdata"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("https://localhost:5002/users");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private string? accessToken;
    private string? error;

  
    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        else
        {
            error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.RedirectUrl!);
            }
        }
    }
}
