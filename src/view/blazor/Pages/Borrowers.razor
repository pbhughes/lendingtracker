@page "/borrowers"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@using MudBlazor
@using LendingView.Components


@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@if (_isAddNew)
{
    <LendingView.Components.AddNewBorrower AddingNew="@_isAddNew" OnAddNew="HandleAddnew"></LendingView.Components.AddNewBorrower>
}
else
{

    <MudDataGrid T="Borrower" @ref="Elements" ServerData="ServerReload" Filterable="false" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Borrowers</MudText>
            <MudIconButton Size="@Size.Large" Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="() => AddNew()" />
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="Borrower" />

            <PropertyColumn Class="d-none" Property="x => x.BorrowerId" Title="ID" Editable="false" Hidden="true" />

            <PropertyColumn Property="x => x.Name" Title="Name">
                <CellTemplate>
                    @context.Item.Name
                    @if (context.Item.Transactions.Count() > 0)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.NewLabel" Color="@Color.Secondary" Title="Has Items"></MudIcon>
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.BorrowerEmail" Title="Email" />
            <PropertyColumn Property="x => x.CountryCode" Title="Country" />
            <PropertyColumn Property="x => x.BorrowerSms" Title="Phone" />
            <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => DeleteItemAsync(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudGrid>
                <MudItem xs="12">
                    <BorrowerIItems Visible="context.Item.Transactions != null && context.Item.Transactions.Count() > 0" Borrower="@context.Item"></BorrowerIItems>
                </MudItem>
            </MudGrid>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Borrower" />
        </PagerContent>
    </MudDataGrid>

    
}

@code {
    private MudDataGrid<Borrower> Elements;


    private bool _isReadOnly = true;
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;
    string searchString = null;
    public bool _isAddNew = false;
    private string? accessToken;
    private string? error;
    

    protected override Task OnInitializedAsync()
    {
        var returnUrl = Navigation.Uri;
        LocalStorage.SetItemAsStringAsync(key: "returnUrl", data: returnUrl);
        return base.OnInitializedAsync();
    }

    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {
                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" },

            });

        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        else
        {
            error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.InteractiveRequestUrl!);
            }
        }
    }

    private async Task<GridData<Borrower>> ServerReload(GridState<Borrower> state)
    {
        await GetAccessToken();
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        bool isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        IEnumerable<Borrower> data = new List<Borrower>();
        int totalItems = 0;


          

            var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            Http.DefaultRequestHeaders.Authorization = value;

            data = await Http.GetFromJsonAsync<List<Borrower>>("/borrowers");
            await Task.Delay(300);
            data = data.Where(element =>
            {
                if (string.IsNullOrWhiteSpace(searchString))
                    return true;
                if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (element.BorrowerEmail.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (element.BorrowerSms.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                return false;
            }).ToArray();
            totalItems = data.Count();

            var sortDefinition = state.SortDefinitions.FirstOrDefault();
            if (sortDefinition != null)
            {
                switch (sortDefinition.SortBy)
                {
                    case nameof(Borrower.Name):
                        data = data.OrderByDirection(
                            sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                            o => o.Name
                        );
                        break;
                    case nameof(Borrower.BorrowerEmail):
                        data = data.OrderByDirection(
                            sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                            o => o.BorrowerEmail
                        );
                        break;
                    case nameof(Borrower.BorrowerSms):
                        data = data.OrderByDirection(
                            sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                            o => o.BorrowerSms
                        );
                        break;
                }
            }
        

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<Borrower>
            {
                TotalItems = totalItems,
                Items = pagedData
            };

    }

    // events
    void StartedEditingItem(Borrower item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Borrower item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }


    async void CommittedItemChanges(Borrower borrower)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(borrower)}");


        //call the put AI and commit the changes
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        var response = await Http.PutAsJsonAsync<Borrower>($"/borrowers/{borrower.BorrowerId}", borrower);

    }

    async void DeleteItemAsync(Borrower borrower)
    {
        _events.Insert(0, $"Event = Item deleted, Data = {System.Text.Json.JsonSerializer.Serialize(borrower)}");

        //call the put AI and commit the changes
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        var response = await Http.DeleteAsync($"/borrowers/{borrower.BorrowerId}");

        Elements.ReloadServerData();
    }

    async void AddNew()
    {
        _isAddNew = true;
    }

    private void HandleAddnew(string msg)
    {
        _isAddNew = false;
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return Elements.ReloadServerData();
    }

}
