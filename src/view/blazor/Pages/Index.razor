@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LendingView.Models
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Text.RegularExpressions
@using System.IdentityModel.Tokens.Jwt


@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider ast
@inject IAccessTokenProvider TokenProvider


<AuthorizeView>
    <Authorized Context="authContext">
        Hello, @authContext.User.Identity.Name

        @if(_collectPhone){


            <h3>Please add a phone number to support SMS messaging.</h3>
            <h5>This can be different than the phone used during authentication</h5>
            <MudGrid >
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <EditForm Model="@me" method="post" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <MudTextField T="string" ReadOnly="true" Label="@me.FullName" Value="@me.FullName"></MudTextField>
                            <MudSelect @bind-Value="me.CountryCode">
                                @foreach (var country in countries)
                                {
                                    <MudSelectItem Value="country.Code">@country.Name</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField T="string" ReadOnly="true" Label="Phone Number" @bind-Value="me.PhoneNumber" For="() => me.PhoneNumber" Placeholder="Enter valid phone"></MudTextField>
                            <MudSpacer/>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto d-flex justify-end align-center">Register</MudButton>
                        </EditForm>
                    </MudPaper>
                </MudItem>

            </MudGrid>
        }
    </Authorized>
    <NotAuthorized>
        <MudChip  T="string" Color="Color.Tertiary">Lending Tracker allows you to keep track of the stuff you own and lend out</MudChip>
        <MudPaper Class="d-flex flex-grow-1 border-none" Outlined="false">
            <video controls>
                <source src="https://needthatbackstorage.blob.core.windows.net/media/video.mp4?sp=r&st=2024-12-25T17:51:45Z&se=2024-12-26T01:51:45Z&sv=2022-11-02&sr=c&sig=B6xEux5LXRgDvht1Z0CGUJ61E5kICQxebZpgujJ5b%2BU%3D" />
                Your browser does not support the video tag sorry
            </video>
        </MudPaper>

    </NotAuthorized>
</AuthorizeView>



@code{

    //Country selector support
    private static List<Country> countries = CountryData.GetCountries();


    private User me = new User();
    private ClaimsIdentity identity;
    private string accessToken = string.Empty;
    private string error;
    private bool _collectPhone = false;

    protected override async Task OnInitializedAsync(){

        // await GetAccessToken();
        var authState = await ast.GetAuthenticationStateAsync();


        if(authState.User.Identity.IsAuthenticated){
            await GetAccessToken();
            string userId = await GetClaimAsync("UserId");


            me.UserId = Guid.Parse(authState.User.Claims.First(nameof => nameof.Type == "sub").Value);
            me.Email = await ParseEmails(authState.User.Identities.First().Claims.First(n => n.Type == "emails").Value);
            me.FullName = authState.User.Identities.First().Claims.First(n => n.Type == "name").Value;

            User theUser = await GetUserPhone(userId);

            if(theUser != null && !string.IsNullOrEmpty(theUser.PhoneNumber))
            {
                Navigation.NavigateTo("/items");
            }
            else{
                _collectPhone = true;
            }
        }
    }

    private async void HandleValidSubmit()
    {
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        var response = await Http.PostAsJsonAsync<User>("/users", me);
    }

    private async Task GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(new AccessTokenRequestOptions
            {

                Scopes = new[] { "https://needthatback.onmicrosoft.com/lender/lender" ,
                                 "profile", "openid"
                }
            });

        if (tokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        else
        {
            error = tokenResult.Status switch
            {
                AccessTokenResultStatus.RequiresRedirect => "Redirect required. Navigating...",
                AccessTokenResultStatus.Success => null,
                _ => "An unknown error occurred."
            };

            if (tokenResult.Status == AccessTokenResultStatus.RequiresRedirect)
            {
                Navigation.NavigateTo(tokenResult.InteractiveRequestUrl!);
            }
        }
    }

    private async Task<string> GetClaimAsync(string claimType)
    {

        var handler = new JwtSecurityTokenHandler();

        // Read the token
        if (handler.CanReadToken(accessToken))
        {
            var jwtToken = handler.ReadJwtToken(accessToken);

            // Access claims
            var claims = jwtToken.Claims;

            foreach (var claim in claims)
            {
                if (claim.Type == claimType)
                {
                    if (claim.Type == "emails")
                    {
                        string emailPattern = @"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}";

                        var firstEmail = jwtToken.Claims.First(n => n.Type == "emails").Value;
                        Console.WriteLine(firstEmail);

                        Match match = Regex.Match(firstEmail, emailPattern);

                        if (match.Success)
                        {
                            return match.Value;
                        }
                        else
                        {
                            return "No Email";
                        }
                    }
                    return claim.Value;
                }
            }
        }
        return null;
    }

    private async Task<string> ParseEmails(string emailClaimValues){
        string emailPattern = @"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}";

        Match match = Regex.Match(emailClaimValues, emailPattern);

        if (match.Success)
        {
            return match.Value;
        }
        else
        {
            return "No Email";
        }
    }

    private async Task<User> GetUserPhone(string userId)
    {
        await GetAccessToken();
        var value = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        Http.DefaultRequestHeaders.Authorization = value;

        User user = await Http.GetFromJsonAsync<User>($"/users/{userId}");
        return user;
    }
}

