@page "/authentication/{action}"
[Authorize]
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorApplicationInsights
@using BlazorApplicationInsights.Interfaces
@using LendingView.Models;
@using System.Text.RegularExpressions
@using LendingView.Servcies

@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject LendingView.Servcies.LendingTrackerService dataService;

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="HandleLoginSucceeded" OnLogOutSucceeded="HandleLogoutSucceeded" />

@code{
    [Parameter] public string Action { get; set; }
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    [Inject] private IApplicationInsights AppInsights { get; set; }



    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }

    private async Task HandleLoginSucceeded(){

        //set the user
        var user = (await AuthenticationState).User;

        await AppInsights.SetAuthenticatedUserContext(user.FindFirst("name")?.Value);


        //we could do some post login stuff here
        //write the user record with the data you have from the login
        User lendingUser = new User();
        lendingUser.FullName = user.Identity.Name;
        string email = string.Empty;
        string emailPattern = @"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}";
        var firstEmail = user.FindFirst(n => n.Type == "emails").Value;
        Console.WriteLine(firstEmail);

        Match match = Regex.Match(firstEmail, emailPattern);
        if (match.Success)
        {
            email = match.Value;
        }
        else
        {
            email = "User";
        }

        lendingUser.Email = email;
        lendingUser.UserId = Guid.Parse(user.FindFirst("sub").Value);
        try
        {
            await dataService.CreateUserAsync(lendingUser);
        }
        catch (Exception ex)
        {

            throw;
        }

        try
        {
            dataService.CreateUserAsync(lendingUser);
        }
        catch (Exception ex)
        {
            
            //if you can write the user goto the profile screen
        }
      

        var returnUrl = Navigation.Uri.Contains("redirect_uri=")
           ? new Uri(Navigation.Uri).Query.Split("redirect_uri=")[1]
           : "/items"; // Default redirect path

        Navigation.NavigateTo(returnUrl, forceLoad: true);
      
    }

    private async Task HandleLogoutSucceeded(){
        await LocalStorage.RemoveItemAsync("firstRun");
        await AppInsights.ClearAuthenticatedUserContext();
    }
}
