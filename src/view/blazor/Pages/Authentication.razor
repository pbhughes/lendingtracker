@page "/authentication/{action}"
[Authorize]
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorApplicationInsights
@using BlazorApplicationInsights.Interfaces
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage



<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="HandleLoginSucceeded" OnLogOutSucceeded="HandleLogoutSucceeded" />

@code{
    [Parameter] public string Action { get; set; }
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    [Inject] private IApplicationInsights AppInsights { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }

    private async Task HandleLoginSucceeded(){

        //set the user
        var user = (await AuthenticationState).User;

        await AppInsights.SetAuthenticatedUserContext(user.FindFirst("name")?.Value);


        //we could do some post login stuff here
        var returnUrl = Navigation.Uri.Contains("redirect_uri=")
           ? new Uri(Navigation.Uri).Query.Split("redirect_uri=")[1]
           : "/items"; // Default redirect path

        Navigation.NavigateTo(returnUrl, forceLoad: true);
      
    }

    private async Task HandleLogoutSucceeded(){
        await LocalStorage.RemoveItemAsync("firstRun");
        await AppInsights.ClearAuthenticatedUserContext();
    }
}
