@using LendingView.Servcies
@inject IUserService _userService
@inject IBrowserViewportService ViewportService



<div class="top-row pl-4 navbar navbar-dark">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Secondary" Edge="Edge.Start" OnClick="@ToggleNavMenu" />
    <MudElement HtmlTag="a"
    Class="ms-1"
    Style="color:turquoise;font-weight:bold;"
    rel="noopener noreferrer">
        Lending Tracker
    </MudElement>
</div>

<div class="sidebar @NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="items">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Items
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="borrowers">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Borrowers
            </NavLink>
        </li>
        @if( _isAdmin ){
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="storeitems">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Store Management
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = false;
    private bool _isAdmin = false;
    private string NavMenuCssClass => collapseNavMenu ? "d-none" : "d-block";

    private int ViewportWidth;
    private int ViewportHeight;
    private Breakpoint Breakpoint;



    protected override async void OnInitialized()
    {
        bool islargescreen = await ViewportService.IsBreakpointWithinWindowSizeAsync(Breakpoint.MdAndUp);
        if (islargescreen)
            collapseNavMenu = false;
        else
            collapseNavMenu = true;

        _userService.AuthenticationStateChanged += HandleUserLoggedIn;
        base.OnInitialized();
    }

    private async void HandleUserLoggedIn(){
        _isAdmin = await _userService.IsAdmin();
        StateHasChanged();

    }

    private void Dispose(){
        _userService.AuthenticationStateChanged -= HandleUserLoggedIn;
    }

    protected override async Task OnInitializedAsync()
    {
        _isAdmin = await  _userService.IsAdmin();
        await base.OnInitializedAsync();
    }

    private async void ToggleNavMenu()
    {
        bool largeScreen = await ViewportService.IsBreakpointWithinWindowSizeAsync(Breakpoint.MdAndUp);
        bool allowToggle = false;
        if ( largeScreen )
        {
            allowToggle = false;

        }
        else{
            allowToggle = true;
        }

        collapseNavMenu = allowToggle &   !collapseNavMenu;
    }

  
}

